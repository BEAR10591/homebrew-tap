From 4773d54fc58065fed96ccb52919e789430d12d10 Mon Sep 17 00:00:00 2001
From: der richter <der.richter@gmx.de>
Date: Tue, 19 Jan 2021 17:11:49 +0100
Subject: [PATCH] mac: add support to set color space for layer and macOS
 transformation

By default utilises the color space of the screen on which the window is
located. If a specific value is defined, it will be instead be utilised.

Depending on the chosen color space the macOS EDR (HDR) support is
activated and that OS's transformation is used.

Fixes #7341
---
 DOCS/man/options.rst               | 29 ++++++++++
 osdep/macos/swift_extensions.swift | 10 ++--
 osdep/macosx_application.h         | 34 +++++++++++
 osdep/macosx_application.m         | 14 +++++
 video/out/cocoa_cb_common.swift    |  8 ++-
 video/out/mac/common.swift         | 93 +++++++++++++++++++++++++++++-
 video/out/mac/gl_layer.swift       |  2 +
 video/out/mac/title_bar.swift      |  1 -
 video/out/mac/view.swift           |  1 +
 wscript                            | 22 ++++++-
 10 files changed, 204 insertions(+), 10 deletions(-)

diff --git a/DOCS/man/options.rst b/DOCS/man/options.rst
index 16625fe0c48..e68c40ad6a0 100644
--- a/DOCS/man/options.rst
+++ b/DOCS/man/options.rst
@@ -5929,6 +5929,35 @@ The following video options are currently all specific to ``--vo=gpu`` and

     macOS only.

+``--macos-output-csp=<csp>``
+    This sets the color space of the layer to activate the macOS color
+    transformation. Depending on the color space used the system's EDR (HDT)
+    support will be activated. To get correct results, this needs to be set to
+    the color primaries/transfer characteristics of the video. It is recommended
+    to use this switch together with ``--target-trc``.
+
+    ``<csp>`` can be one of the following:
+
+    :auto:               Sets the color space to the icc profile of the
+                         screen (default).
+    :display_p3:         DCI P3 primaries, a D65 white point, and the sRGB
+                         transfer function.
+    :display_p3_hlg:     DCI P3 primaries, a D65 white point, and the Hybrid
+                         Log-Gamma (HLG) transfer function.
+    :display_p3_pq:      DCI P3 primaries, a D65 white point, and the Perceptual
+                         Quantizer (PQ) transfer function.
+    :display_p3_pq_eotf: DCI P3 primaries, a D65 white point, and the Perceptual
+                         Quantizer (PQ) transfer function.
+    :dcip3:              DCI P3 color space.
+    :itur_2020:          ITU BT.2020 color space.
+    :itur_709:           ITU BT.709 color space.
+    :srgb:               sRGB colorimetry and non-linear transfer function.
+    :linear_srgb:        Same as sRGB but linear transfer function.
+    :generic_rgb_linear: RGB and linear transfer function.
+    :adobe_rgb1998:      Adobe RGB (1998) color space.
+
+    macOS only.
+
 ``--android-surface-size=<WxH>``
     Set dimensions of the rendering surface used by the Android gpu context.
     Needs to be set by the embedding application if the dimensions change during
diff --git a/osdep/macos/swift_extensions.swift b/osdep/macos/swift_extensions.swift
index a1aeb0abf7c..d6a5b2590b8 100644
--- a/osdep/macos/swift_extensions.swift
+++ b/osdep/macos/swift_extensions.swift
@@ -22,7 +22,6 @@ extension NSDeviceDescriptionKey {
 }

 extension NSScreen {
-
     public var displayID: CGDirectDisplayID {
         get {
             return deviceDescription[.screenNumber] as? CGDirectDisplayID ?? 0
@@ -62,7 +61,6 @@ extension NSScreen {
 }

 extension NSColor {
-
     convenience init(hex: String) {
         let int = Int(hex.dropFirst(), radix: 16) ?? 0
         let alpha = CGFloat((int >> 24) & 0x000000FF)/255
@@ -75,15 +73,19 @@ extension NSColor {
 }

 extension Bool {
-
     init(_ int32: Int32) {
         self.init(int32 != 0)
     }
 }

 extension Int32 {
-
     init(_ bool: Bool) {
         self.init(bool ? 1 : 0)
     }
 }
+
+protocol VideoLayer: class {
+    var colorspace: CGColorSpace? { get set }
+}
+
+extension CAOpenGLLayer: VideoLayer {}
diff --git a/osdep/macosx_application.h b/osdep/macosx_application.h
index 05d0b07c074..036a40ed558 100644
--- a/osdep/macosx_application.h
+++ b/osdep/macosx_application.h
@@ -26,6 +26,39 @@ enum {
     FRAME_WHOLE,
 };

+enum {
+    MAC_CSP_AUTO = -1,
+    MAC_CSP_DISPLAY_P3, //macOS 10.11.2+
+    MAC_CSP_DISPLAY_P3_HLG, //macOS 10.14.6+
+    MAC_CSP_DISPLAY_P3_PQ_EOTF, //macOS 10.14.6–10.15.4
+    MAC_CSP_DCIP3, //macOS 10.11+
+    MAC_CSP_ITUR_2020, //macOS 10.11+
+    MAC_CSP_ITUR_709, //macOS 10.11+
+
+    MAC_CSP_SRGB, //macOS 10.5+
+    MAC_CSP_LINEAR_SRGB, //macOS 10.12+
+    MAC_CSP_GENERIC_RGB_LINEAR, //macOS 10.5+
+    MAC_CSP_ADOBE_RGB1998, //macOS 10.5+
+
+    // no documentation?
+    MAC_CSP_DISPLAY_P3_PQ, //macOS 10.15.4+
+
+
+    // extended formats with values below 0.0 and above 1.0, useless?
+    MAC_CSP_EXTENDED_LINEAR_DISPLAY_P3, //macOS 10.14.3+
+    MAC_CSP_EXTENDED_SRGB, //macOS 10.12+
+    MAC_CSP_EXTENDED_LINEAR_SRGB, //macOS 10.12+
+    MAC_CSP_EXTENDED_LINEAR_ITUR_2020, //macOS 10.14.3+
+    // pixel values between 0.0 and 12.0
+    MAC_CSP_ITUR_2020_HLG, //macOS 10.15.6–11.0
+    // pixel value of 1.0 is assumed to be 100 nits
+    MAC_CSP_ITUR_2020_PQ_EOTF, //macOS 10.14.6–10.15.4
+
+    // no documentation?
+    MAC_CSP_EXTENDED_DISPLAY_P3, //macOS 11.0+
+    MAC_CSP_EXTENDED_ITUR_2020, //macOS 11.0+
+};
+
 struct macos_opts {
     int macos_title_bar_style;
     int macos_title_bar_appearance;
@@ -35,6 +68,7 @@ struct macos_opts {
     int macos_force_dedicated_gpu;
     int macos_app_activation_policy;
     int macos_geometry_calculation;
+    int macos_output_csp;
     int cocoa_cb_sw_renderer;
     int cocoa_cb_10bit_context;
 };
diff --git a/osdep/macosx_application.m b/osdep/macosx_application.m
index bb8b67b575e..17dc9945a99 100644
--- a/osdep/macosx_application.m
+++ b/osdep/macosx_application.m
@@ -67,6 +67,19 @@
             {"regular", 0}, {"accessory", 1}, {"prohibited", 2})},
         {"macos-geometry-calculation", OPT_CHOICE(macos_geometry_calculation,
             {"visible", FRAME_VISIBLE}, {"whole", FRAME_WHOLE})},
+        {"macos-output-csp", OPT_CHOICE(macos_output_csp,
+             {"auto", MAC_CSP_AUTO},
+             {"display_p3", MAC_CSP_DISPLAY_P3},
+             {"display_p3_hlg", MAC_CSP_DISPLAY_P3_HLG},
+             {"display_p3_pq", MAC_CSP_DISPLAY_P3_PQ},
+             {"display_p3_pq_eotf", MAC_CSP_DISPLAY_P3_PQ_EOTF},
+             {"dcip3", MAC_CSP_DCIP3},
+             {"itur_2020", MAC_CSP_ITUR_2020},
+             {"itur_709", MAC_CSP_ITUR_709},
+             {"srgb", MAC_CSP_SRGB},
+             {"linear_srgb", MAC_CSP_LINEAR_SRGB},
+             {"generic_rgb_linear", MAC_CSP_GENERIC_RGB_LINEAR},
+             {"adobe_rgb1998", MAC_CSP_ADOBE_RGB1998})},
         {"cocoa-cb-sw-renderer", OPT_CHOICE(cocoa_cb_sw_renderer,
             {"auto", -1}, {"no", 0}, {"yes", 1})},
         {"cocoa-cb-10bit-context", OPT_FLAG(cocoa_cb_10bit_context)},
@@ -78,6 +91,7 @@
     .defaults = &(const struct macos_opts){
         .macos_title_bar_color = {0, 0, 0, 0},
         .macos_fs_animation_duration = -1,
+        .macos_output_csp = MAC_CSP_AUTO,
         .cocoa_cb_sw_renderer = -1,
         .cocoa_cb_10bit_context = 1
     },
diff --git a/video/out/cocoa_cb_common.swift b/video/out/cocoa_cb_common.swift
index 8dd76f4bc5b..8ce7f3cba7f 100644
--- a/video/out/cocoa_cb_common.swift
+++ b/video/out/cocoa_cb_common.swift
@@ -21,6 +21,10 @@ class CocoaCB: Common {
     var libmpv: LibmpvHelper
     var layer: GLLayer?

+    override var videoLayer: VideoLayer? {
+        get { return layer }
+    }
+
     @objc var isShuttingDown: Bool = false

     enum State {
@@ -121,9 +125,7 @@ class CocoaCB: Common {
         }

         libmpv.setRenderICCProfile(colorSpace)
-        if #available(macOS 10.11, *) {
-            layer?.colorspace = colorSpace.cgColorSpace
-        }
+        super.updateICCProfile()
     }

     override func windowDidEndAnimation() {
diff --git a/video/out/mac/common.swift b/video/out/mac/common.swift
index 6c3d0fcfb38..2d2b99e2d1f 100644
--- a/video/out/mac/common.swift
+++ b/video/out/mac/common.swift
@@ -26,6 +26,7 @@ class Common: NSObject {
     var window: Window?
     var view: View?
     var titleBar: TitleBar?
+    private(set) var videoLayer: VideoLayer?

     var link: CVDisplayLink?

@@ -395,7 +396,95 @@ class Common: NSObject {
     }

     func updateICCProfile() {
-        log.sendWarning("updateICCProfile not implemented")
+        layerGuard: if #available(macOS 10.11, *) {
+            guard let layer = videoLayer else {
+                log.sendWarning("No layer found, macOS color transformation deactivated")
+                break layerGuard
+            }
+
+            layer.colorspace = getColorSpace()
+        }
+
+        flagEvents(VO_EVENT_ICC_PROFILE_CHANGED)
+    }
+
+    @available(macOS 10.11, *)
+    func getColorSpace() -> CGColorSpace? {
+        guard let colorSpace = window?.screen?.colorSpace?.cgColorSpace else {
+            log.sendWarning("Couldn't retrieve ICC Profile, no color space available")
+            return nil
+        }
+
+        let outputCsp = Int(mpv?.macOpts.macos_output_csp ?? Int32(MAC_CSP_AUTO))
+
+        switch outputCsp {
+        case MAC_CSP_AUTO:
+            return colorSpace
+        case MAC_CSP_SRGB:
+            return CGColorSpace(name: CGColorSpace.sRGB)
+        case MAC_CSP_GENERIC_RGB_LINEAR:
+            return CGColorSpace(name: CGColorSpace.genericRGBLinear)
+        case MAC_CSP_ADOBE_RGB1998:
+            return CGColorSpace(name: CGColorSpace.adobeRGB1998)
+#if HAVE_MACOS_10_11_FEATURES
+        case MAC_CSP_DCIP3:
+            return CGColorSpace(name: CGColorSpace.dcip3)
+        case MAC_CSP_ITUR_2020:
+            return CGColorSpace(name: CGColorSpace.itur_2020)
+        case MAC_CSP_ITUR_709:
+            return CGColorSpace(name: CGColorSpace.itur_709)
+#endif
+        default: break
+        }
+
+#if HAVE_MACOS_10_11_2_FEATURES
+        if #available(macOS 10.11.2, *) {
+            switch outputCsp {
+            case MAC_CSP_DISPLAY_P3:
+                return CGColorSpace(name: CGColorSpace.displayP3)
+            default: break
+            }
+        }
+#endif
+
+#if HAVE_MACOS_10_12_FEATURES
+        if #available(macOS 10.12, *) {
+            switch outputCsp {
+            case MAC_CSP_LINEAR_SRGB:
+                return CGColorSpace(name: CGColorSpace.linearSRGB)
+            default: break
+            }
+        }
+#endif
+
+#if HAVE_MACOS_10_14_6_FEATURES
+        // these color spaces are defined from SDK 10.14.6 onwards but throws a
+        // null pointer exception when accessing on 10.14.6, but not on 10.15.x
+        // most likely an OS bug
+        if #available(macOS 10.15, *) {
+            switch outputCsp {
+            case MAC_CSP_DISPLAY_P3_HLG:
+                return CGColorSpace(name: CGColorSpace.displayP3_HLG)
+            case MAC_CSP_DISPLAY_P3_PQ_EOTF:
+                return CGColorSpace(name: CGColorSpace.displayP3_PQ_EOTF) // deprecated
+            default: break
+            }
+        }
+#endif
+
+#if HAVE_MACOS_10_15_4_FEATURES
+        if #available(macOS 10.15.4, *) {
+            switch outputCsp {
+            case MAC_CSP_DISPLAY_P3_PQ:
+                return CGColorSpace(name: CGColorSpace.displayP3_PQ)
+            default: break
+            }
+        }
+#endif
+
+        log.sendWarning("Couldn't retrieve configured color space, falling back to auto")
+
+        return colorSpace
     }

     func getScreenBy(id screenID: Int) -> NSScreen? {
@@ -679,6 +768,8 @@ class Common: NSObject {
                 titleBar?.set(material: Int(mpv.macOpts.macos_title_bar_material))
             case MPVHelper.getPointer(&mpv.macOptsPtr.pointee.macos_title_bar_color):
                 titleBar?.set(color: mpv.macOpts.macos_title_bar_color)
+            case MPVHelper.getPointer(&mpv.macOptsPtr.pointee.macos_output_csp):
+                updateICCProfile()
             default:
                 break
             }
diff --git a/video/out/mac/gl_layer.swift b/video/out/mac/gl_layer.swift
index 6c48004f4fe..ed434986176 100644
--- a/video/out/mac/gl_layer.swift
+++ b/video/out/mac/gl_layer.swift
@@ -108,6 +108,8 @@ class GLLayer: CAOpenGLLayer {
         super.init()
         autoresizingMask = [.layerWidthSizable, .layerHeightSizable]
         backgroundColor = NSColor.black.cgColor
+        // that this to true by default?
+        wantsExtendedDynamicRangeContent = true

         if #available(macOS 10.12, *), bufferDepth > 8 {
             contentsFormat = .RGBA16Float
diff --git a/video/out/mac/title_bar.swift b/video/out/mac/title_bar.swift
index e49c2bb99c9..6edd9c3bb35 100644
--- a/video/out/mac/title_bar.swift
+++ b/video/out/mac/title_bar.swift
@@ -45,7 +45,6 @@ class TitleBar: NSVisualEffectView {
             } else {
                 state = .followsWindowActiveState
             }
-
         }
     }

diff --git a/video/out/mac/view.swift b/video/out/mac/view.swift
index a54f1da948c..433b6933ab7 100644
--- a/video/out/mac/view.swift
+++ b/video/out/mac/view.swift
@@ -33,6 +33,7 @@ class View: NSView {
         super.init(frame: frame)
         autoresizingMask = [.width, .height]
         wantsBestResolutionOpenGLSurface = true
+        wantsExtendedDynamicRangeOpenGLSurface = true
         registerForDraggedTypes([ .fileURLCompat, .URLCompat, .string ])
     }

diff --git a/wscript b/wscript
index 86231b79b1b..ff0f5d1f7d9 100644
--- a/wscript
+++ b/wscript
@@ -818,6 +818,16 @@ standalone_features = [
         'desc': 'macOS 10.11 SDK Features',
         'deps': 'cocoa',
         'func': check_macos_sdk('10.11')
+    }, {
+        'name': '--macos-10-11-2-features',
+        'desc': 'macOS 10.11.2 SDK Features',
+        'deps': 'cocoa',
+        'func': check_macos_sdk('10.11.2')
+    }, {
+        'name': '--macos-10-12-features',
+        'desc': 'macOS 10.12 SDK Features',
+        'deps': 'cocoa',
+        'func': check_macos_sdk('10.12')
     }, {
         'name': '--macos-10-12-2-features',
         'desc': 'macOS 10.12.2 SDK Features',
@@ -828,7 +838,17 @@ standalone_features = [
         'desc': 'macOS 10.14 SDK Features',
         'deps': 'cocoa',
         'func': check_macos_sdk('10.14')
-    },{
+    }, {
+        'name': '--macos-10-14-6-features',
+        'desc': 'macOS 10.14.6 SDK Features',
+        'deps': 'cocoa',
+        'func': check_macos_sdk('10.14.6')
+    }, {
+        'name': '--macos-10-15-4-features',
+        'desc': 'macOS 10.15.4 SDK Features',
+        'deps': 'cocoa',
+        'func': check_macos_sdk('10.15.4')
+    }, {
         'name': '--macos-media-player',
         'desc': 'macOS Media Player support',
         'deps': 'macos-10-12-2-features && swift',
