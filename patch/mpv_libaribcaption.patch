diff --git a/demux/demux_mkv.c b/demux/demux_mkv.c
index 3f0472dae96..c330709d23b 100644
--- a/demux/demux_mkv.c
+++ b/demux/demux_mkv.c
@@ -1831,9 +1831,15 @@ static const char *const mkv_sub_tag[][2] = {
     { "D_WEBVTT/CAPTIONS",  "webvtt-webm"},
     { "S_TEXT/WEBVTT",      "webvtt"},
     { "S_DVBSUB",           "dvb_subtitle"},
+    { "S_ARIBSUB",          "arib_caption"},
     {0}
 };

+static void avcodec_par_destructor(void *p)
+{
+    avcodec_parameters_free(p);
+}
+
 static int demux_mkv_open_sub(demuxer_t *demuxer, mkv_track_t *track)
 {
     const char *subtitle_type = NULL;
@@ -1862,6 +1868,38 @@ static int demux_mkv_open_sub(demuxer_t *demuxer, mkv_track_t *track)
     sh->codec->extradata = track->private_data;
     sh->codec->extradata_size = track->private_size;

+    if (!strcmp(sh->codec->codec, "arib_caption") && track->private_size >= 3) {
+        struct AVCodecParameters **lavp = talloc_ptrtype(track, lavp);
+
+        talloc_set_destructor(lavp, avcodec_par_destructor);
+
+        struct AVCodecParameters *lav = *lavp = sh->codec->lav_codecpar = avcodec_parameters_alloc();
+        MP_HANDLE_OOM(lav);
+
+        lav->codec_type = AVMEDIA_TYPE_SUBTITLE;
+        lav->codec_id = AV_CODEC_ID_ARIB_CAPTION;
+
+        int component_tag = track->private_data[0];
+        int data_component_id = AV_RB16(track->private_data + 1);
+        switch (data_component_id) {
+        case 0x0008:
+            // [0x30..0x37] are component tags utilized for
+            // non-mobile captioning service ("profile A").
+            if (component_tag >= 0x30 && component_tag <= 0x37)
+                lav->profile = FF_PROFILE_ARIB_PROFILE_A;
+            break;
+        case 0x0012:
+            // component tag 0x87 signifies a mobile/partial reception
+            // (1seg) captioning service ("profile C").
+            if (component_tag == 0x87)
+                lav->profile = FF_PROFILE_ARIB_PROFILE_C;
+            break;
+        }
+        if (lav->profile == FF_PROFILE_UNKNOWN)
+            MP_WARN(demuxer, "ARIB caption profile %02x / %04x not supported.\n",
+                    component_tag, data_component_id);
+    }
+
     demux_add_sh_stream(demuxer, sh);

     if (!subtitle_type)
diff --git a/sub/lavc_conv.c b/sub/lavc_conv.c
index 2a7347bee84..532e91d5088 100644
--- a/sub/lavc_conv.c
+++ b/sub/lavc_conv.c
@@ -26,6 +26,7 @@
 #include "mpv_talloc.h"
 #include "common/msg.h"
 #include "common/av_common.h"
+#include "demux/stheader.h"
 #include "misc/bstr.h"
 #include "sd.h"

@@ -65,13 +66,13 @@ static void disable_styles(bstr header)
     }
 }

-struct lavc_conv *lavc_conv_create(struct mp_log *log, const char *codec_name,
-                                   char *extradata, int extradata_len)
+struct lavc_conv *lavc_conv_create(struct mp_log *log,
+                                   const struct mp_codec_params *mp_codec)
 {
     struct lavc_conv *priv = talloc_zero(NULL, struct lavc_conv);
     priv->log = log;
     priv->cur_list = talloc_array(priv, char*, 0);
-    priv->codec = talloc_strdup(priv, codec_name);
+    priv->codec = talloc_strdup(priv, mp_codec->codec);
     AVCodecContext *avctx = NULL;
     AVDictionary *opts = NULL;
     const char *fmt = get_lavc_format(priv->codec);
@@ -81,7 +82,7 @@ struct lavc_conv *lavc_conv_create(struct mp_log *log, const char *codec_name,
     avctx = avcodec_alloc_context3(codec);
     if (!avctx)
         goto error;
-    if (mp_lavc_set_extradata(avctx, extradata, extradata_len) < 0)
+    if (mp_set_avctx_codec_headers(avctx, mp_codec) < 0)
         goto error;

     priv->avpkt = av_packet_alloc();
@@ -93,7 +94,7 @@ struct lavc_conv *lavc_conv_create(struct mp_log *log, const char *codec_name,
     av_dict_set(&opts, "sub_text_format", "ass", 0);
 #endif
     av_dict_set(&opts, "flags2", "+ass_ro_flush_noop", 0);
-    if (strcmp(codec_name, "eia_608") == 0)
+    if (strcmp(priv->codec, "eia_608") == 0)
         av_dict_set(&opts, "real_time", "1", 0);
     if (avcodec_open2(avctx, codec, &opts) < 0)
         goto error;
diff --git a/sub/sd.h b/sub/sd.h
index 6801a383b77..87270c6c4f2 100644
--- a/sub/sd.h
+++ b/sub/sd.h
@@ -46,8 +46,8 @@ struct sd_functions {

 // lavc_conv.c
 struct lavc_conv;
-struct lavc_conv *lavc_conv_create(struct mp_log *log, const char *codec_name,
-                                   char *extradata, int extradata_len);
+struct lavc_conv *lavc_conv_create(struct mp_log *log,
+                                   const struct mp_codec_params *mp_codec);
 char *lavc_conv_get_extradata(struct lavc_conv *priv);
 char **lavc_conv_decode(struct lavc_conv *priv, struct demux_packet *packet,
                         double *sub_pts, double *sub_duration);
diff --git a/sub/sd_ass.c b/sub/sd_ass.c
index 0ea696eeabd..34dc567e549 100644
--- a/sub/sd_ass.c
+++ b/sub/sd_ass.c
@@ -261,9 +261,7 @@ static int init(struct sd *sd)
         strcmp(sd->codec->codec, "null") != 0)
     {
         ctx->is_converted = true;
-        ctx->converter = lavc_conv_create(sd->log, sd->codec->codec,
-                                          sd->codec->extradata,
-                                          sd->codec->extradata_size);
+        ctx->converter = lavc_conv_create(sd->log, sd->codec);
         if (!ctx->converter)
             return -1;

diff --git a/DOCS/man/options.rst b/DOCS/man/options.rst
index df3674c8327..cf65afe1356 100644
--- a/DOCS/man/options.rst
+++ b/DOCS/man/options.rst
@@ -2913,6 +2913,13 @@ Subtitles

     If this option is not specified, ``~~/fonts`` will be used by default.

+``--sd-lavc-o=<key>=<value>[,<key>=<value>[,...]]``
+    Pass AVOptions to libavcodec decoder. Note, a patch to make the o=
+    unneeded and pass all unknown options through the AVOption system is
+    welcome. A full list of AVOptions can be found in the FFmpeg manual.
+
+    This is a key/value list option. See `List Options`_ for details.
+
 Window
 ------

diff --git a/common/av_common.c b/common/av_common.c
index 5d07349af08..afe7a6ff103 100644
--- a/common/av_common.c
+++ b/common/av_common.c
@@ -394,3 +394,16 @@ int mp_set_avopts_pos(struct mp_log *log, void *avobj, void *posargs, char **kv)
     }
     return success;
 }
+
+// kv is in the format as by OPT_KEYVALUELIST(): kv[0]=key0, kv[1]=val0, ...
+// Find a value by key
+char *mp_get_avopts(char **kv, char *key)
+{
+    for (int n = 0; kv && kv[n * 2]; n++) {
+        char *k = kv[n * 2 + 0];
+        char *v = kv[n * 2 + 1];
+        if (strcmp(k, key) == 0)
+            return v;
+    }
+    return NULL;
+}
diff --git a/common/av_common.h b/common/av_common.h
index 1f05e14fab9..a6e425b8a51 100644
--- a/common/av_common.h
+++ b/common/av_common.h
@@ -50,5 +50,6 @@ void mp_set_avdict(struct AVDictionary **dict, char **kv);
 void mp_avdict_print_unset(struct mp_log *log, int msgl, struct AVDictionary *d);
 int mp_set_avopts(struct mp_log *log, void *avobj, char **kv);
 int mp_set_avopts_pos(struct mp_log *log, void *avobj, void *posargs, char **kv);
+char *mp_get_avopts(char **kv, char *key);

 #endif
diff --git a/options/options.c b/options/options.c
index 5401ab126ba..7150829aa4d 100644
--- a/options/options.c
+++ b/options/options.c
@@ -292,6 +292,7 @@ const struct m_sub_options mp_subtitle_sub_opts = {
         {"sub-clear-on-seek", OPT_FLAG(sub_clear_on_seek)},
         {"teletext-page", OPT_INT(teletext_page), M_RANGE(1, 999)},
         {"sub-past-video-end", OPT_FLAG(sub_past_video_end)},
+        {"sd-lavc-o", OPT_KEYVALUELIST(sdopts)},
         {0}
     },
     .size = sizeof(OPT_BASE_STRUCT),
diff --git a/options/options.h b/options/options.h
index c3a5e727eef..20f3f446500 100644
--- a/options/options.h
+++ b/options/options.h
@@ -110,6 +110,7 @@ struct mp_subtitle_opts {
     int sub_clear_on_seek;
     int teletext_page;
     int sub_past_video_end;
+    char **sdopts;
 };

 struct mp_sub_filter_opts {
diff --git a/sub/lavc_conv.c b/sub/lavc_conv.c
index 532e91d5088..bcd51129e0b 100644
--- a/sub/lavc_conv.c
+++ b/sub/lavc_conv.c
@@ -67,7 +67,8 @@ static void disable_styles(bstr header)
 }

 struct lavc_conv *lavc_conv_create(struct mp_log *log,
-                                   const struct mp_codec_params *mp_codec)
+                                   const struct mp_codec_params *mp_codec,
+                                   char **sdopts)
 {
     struct lavc_conv *priv = talloc_zero(NULL, struct lavc_conv);
     priv->log = log;
@@ -96,6 +97,9 @@ struct lavc_conv *lavc_conv_create(struct mp_log *log,
     av_dict_set(&opts, "flags2", "+ass_ro_flush_noop", 0);
     if (strcmp(priv->codec, "eia_608") == 0)
         av_dict_set(&opts, "real_time", "1", 0);
+
+    mp_set_avopts(log, avctx, sdopts);
+
     if (avcodec_open2(avctx, codec, &opts) < 0)
         goto error;
     av_dict_free(&opts);
diff --git a/sub/sd.h b/sub/sd.h
index 87270c6c4f2..a0f49da7e7b 100644
--- a/sub/sd.h
+++ b/sub/sd.h
@@ -47,7 +47,8 @@ struct sd_functions {
 // lavc_conv.c
 struct lavc_conv;
 struct lavc_conv *lavc_conv_create(struct mp_log *log,
-                                   const struct mp_codec_params *mp_codec);
+                                   const struct mp_codec_params *mp_codec,
+                                   char **sdopts);
 char *lavc_conv_get_extradata(struct lavc_conv *priv);
 char **lavc_conv_decode(struct lavc_conv *priv, struct demux_packet *packet,
                         double *sub_pts, double *sub_duration);
diff --git a/sub/sd_ass.c b/sub/sd_ass.c
index bec989fee7f..f6f3d492336 100644
--- a/sub/sd_ass.c
+++ b/sub/sd_ass.c
@@ -261,7 +261,7 @@ static int init(struct sd *sd)
         strcmp(sd->codec->codec, "null") != 0)
     {
         ctx->is_converted = true;
-        ctx->converter = lavc_conv_create(sd->log, sd->codec);
+        ctx->converter = lavc_conv_create(sd->log, sd->codec, sd->opts->sdopts);
         if (!ctx->converter)
             return -1;

diff --git a/sub/sd_lavc.c b/sub/sd_lavc.c
index 1f7bf76fce3..e0d82688fb1 100644
--- a/sub/sd_lavc.c
+++ b/sub/sd_lavc.c
@@ -75,6 +75,7 @@ struct sd_lavc_priv {
 static int init(struct sd *sd)
 {
     enum AVCodecID cid = mp_codec_to_av_codec_id(sd->codec->codec);
+    char *sub_type = NULL;

     // Supported codecs must be known to decode to paletted bitmaps
     switch (cid) {
@@ -84,6 +85,13 @@ static int init(struct sd *sd)
     case AV_CODEC_ID_XSUB:
     case AV_CODEC_ID_DVD_SUBTITLE:
         break;
+    case AV_CODEC_ID_ARIB_CAPTION:
+        // Use bitmap subtitles driver only when the sub_type option is set to 'bitmap'
+        sub_type = mp_get_avopts(sd->opts->sdopts, "sub_type");
+        if (sub_type != NULL && strcmp(sub_type, "bitmap") == 0)
+            break;
+
+        return -1; // If set to other values, try other drivers
     default:
         return -1;
     }
@@ -103,6 +111,9 @@ static int init(struct sd *sd)
         goto error;
     priv->pkt_timebase = mp_get_codec_timebase(sd->codec);
     ctx->pkt_timebase = priv->pkt_timebase;
+
+    mp_set_avopts(sd->log, ctx, sd->opts->sdopts);
+
     if (avcodec_open2(ctx, sub_codec, NULL) < 0)
         goto error;
     priv->avctx = ctx;
